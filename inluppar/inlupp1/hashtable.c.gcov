        -:    0:Source:hashtable.c
        -:    0:Graph:hashtable-hashtable.gcno
        -:    0:Data:hashtable-hashtable.gcda
        -:    0:Runs:3
        -:    0:Source is newer than graph
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include <stdbool.h>
        -:    4:#include "hashtable.h"
        -:    5:
        -:    6:#define No_Buckets 17
        -:    7:
        -:    8:typedef struct entry {
        -:    9:    int key;                // Holds the key
        -:   10:    char *value;           // Holds the value
        -:   11:    struct entry *next;    // Points to the next entry (possibly NULL)
        -:   12:} entry_t;
        -:   13:
        -:   14:typedef struct hash_table {
        -:   15:    entry_t *buckets[No_Buckets]; // Fixed number of buckets
        -:   16:} ioopm_hash_table_t;
        -:   17:
        -:   18:/// @brief Create a new empty hash table
        -:   19:/// @return Pointer to the created hash table
       36:   20:ioopm_hash_table_t *ioopm_hash_table_create(void) {
       36:   21:    ioopm_hash_table_t *result = calloc(1, sizeof(ioopm_hash_table_t));
       36:   22:    return result;
        -:   23:}
        -:   24:
        -:   25:/// @brief Destroy the hash table and free the allocated memory
        -:   26:/// @param ht the hash table to destroy
       36:   27:void ioopm_hash_table_destroy(ioopm_hash_table_t *ht) {
       36:   28:    if (ht != NULL) {
       36:   29:        ioopm_hash_table_clear(ht); // Clear all entries first
       36:   30:        free(ht);                   // Free the hash table itself
        -:   31:    }
       36:   32:}
        -:   33:
      282:   34:static int hash_function(int key) {
      282:   35:    return key % No_Buckets;
        -:   36:}
        -:   37:
      237:   38:static entry_t *entry_create(int key, char *value, entry_t *next_value) {
      237:   39:    entry_t *new_entry = calloc(1, sizeof(entry_t));
      237:   40:    if (new_entry == NULL) {
    #####:   41:        return NULL;
        -:   42:    }
      237:   43:    new_entry->key = key;
      237:   44:    new_entry->value = strdup(value);  // Make a copy of the value string
      237:   45:    new_entry->next = next_value;
        -:   46:
      237:   47:    return new_entry;
        -:   48:}
        -:   49:
        -:   50:// Helper function to find previous entry for a key
      243:   51:static entry_t *find_previous_entry_for_key(entry_t **bucket_head, int key) {
        -:   52:    
      243:   53:    entry_t *current = *bucket_head;
      243:   54:    entry_t *prev = NULL;
        -:   55:
      243:   56:    if (!current) {
      234:   57:        return NULL;
        -:   58:    }
        -:   59:
       12:   60:    while (current != NULL && current->key != key) {
        3:   61:        prev = current;
        3:   62:        current = current->next;
        -:   63:    }
        -:   64:
        9:   65:    return prev;
        -:   66:}
        -:   67:
        -:   68:/// @brief Inserting entry into the hash table 
        -:   69:/// @param ht the hash table being used
        -:   70:/// @param key the key being inserted
        -:   71:/// @param value the value being inserted
      240:   72:void ioopm_hash_table_insert(ioopm_hash_table_t *ht, int key, char *value) {
      240:   73:    int bucket = hash_function(key);
      240:   74:    entry_t *prev_entry = find_previous_entry_for_key(&ht->buckets[bucket], key);
      240:   75:    entry_t *next = prev_entry ? prev_entry->next : ht->buckets[bucket];
        -:   76:
      240:   77:    if (next != NULL && next->key == key) {
        3:   78:        free(next->value);           // Free the old value before replacing
        3:   79:        next->value = strdup(value); // Replace with a new value
        -:   80:    } else {
      237:   81:        entry_t *new_entry = entry_create(key, value, next);
      237:   82:        if (prev_entry) {
        3:   83:            prev_entry->next = new_entry;
        -:   84:        } else {
      234:   85:            ht->buckets[bucket] = new_entry;
        -:   86:        }
        -:   87:    }
      240:   88:}
        -:   89:
        -:   90:
        -:   91:
        -:   92:// Helper function for recursive lookup (F14)
        -:   93:static void *recursive_lookup(entry_t *searching_entry, int key) {
        -:   94:    if (searching_entry == NULL) {
        -:   95:        return NULL; 
        -:   96:    }
        -:   97:
        -:   98:    if (searching_entry->key == key) {
        -:   99:        return searching_entry->value; 
        -:  100:    }
        -:  101:
        -:  102:    // The recursive call is now the last operation.
        -:  103:    return recursive_lookup(searching_entry->next, key); 
       42:  104:}
       42:  105:
       18:  106:
        -:  107:// static void *non_tail_recursive_lookup(entry_t *searching_entry, int key) {
       24:  108://     if (searching_entry == NULL) {
       21:  109://         return NULL; 
        -:  110://     }
        -:  111:    
        3:  112://     if (searching_entry->key == key) {
        -:  113://         return searching_entry->value; 
        -:  114://     }
        -:  115:
       39:  116://     void *result = non_tail_recursive_lookup(searching_entry->next, key); 
       39:  117:    
        -:  118://     return result; 
        -:  119:// }
        -:  120:
        -:  121:
        -:  122:/// @brief Lookup the value for a key in the hash table
        -:  123:/// @param ht the hash table being used
       39:  124:/// @param key the key to lookup
       39:  125:/// @return the value mapped to by key, or NULL if not found
       39:  126:char *ioopm_hash_table_lookup(ioopm_hash_table_t *ht, int key) {
        -:  127:    int bucket = hash_function(key);
        -:  128:    return recursive_lookup(ht->buckets[bucket], key);
        -:  129:}
        -:  130:
        -:  131:/// @brief Remove any mapping from key to a value
        -:  132:/// @param ht hash table operated upon
        3:  133:/// @param key key to remove
        3:  134:/// @return the value mapped to by key
        3:  135:char *ioopm_hash_table_remove(ioopm_hash_table_t *ht, int key) {
       3*:  136:    int bucket = hash_function(key);
        -:  137:    entry_t *prev_entry = find_previous_entry_for_key(&ht->buckets[bucket], key);
        3:  138:    entry_t *entry_to_remove = prev_entry ? prev_entry->next : ht->buckets[bucket];
    #####:  139:
        -:  140:    if (!entry_to_remove || entry_to_remove->key != key) {
        -:  141:        return NULL; // Key not found
        3:  142:    }
        3:  143:
    #####:  144:    char *removed_val = strdup(entry_to_remove->value); // Copy the value to return it
        -:  145:    if (prev_entry) {
        3:  146:        prev_entry->next = entry_to_remove->next;
        -:  147:    } else {
        -:  148:        ht->buckets[bucket] = entry_to_remove->next;
        3:  149:    }
        3:  150:
        3:  151:    free(entry_to_remove->value); // Free the value
        -:  152:    free(entry_to_remove);         // Free the entry itself
        -:  153:    return removed_val;
        -:  154:}
        -:  155:
        -:  156:/// @brief Returns the number of key => value entries in the hash table
       24:  157:/// @param ht hash table operated upon
       24:  158:/// @return the number of key => value entries in the hash table
      432:  159:int ioopm_hash_table_size(ioopm_hash_table_t *ht) {
      408:  160:    int size = 0;
      507:  161:    for (int i = 0; i < No_Buckets; i++) {
       99:  162:        entry_t *entry = ht->buckets[i];
       99:  163:        while (entry) {
        -:  164:            size++;
        -:  165:            entry = entry->next;
       24:  166:        }
        -:  167:    }
        -:  168:    return size;
        -:  169:}
        -:  170:
        6:  171:/// @brief Checks if the hash table is empty
        6:  172:/// @param ht hash table operated upon
        -:  173:bool ioopm_hash_table_is_empty(ioopm_hash_table_t *ht) {
        -:  174:    return ioopm_hash_table_size(ht) == 0;
        -:  175:}
        -:  176:
       39:  177:/// @brief Clear all the entries in a hash table
      702:  178:/// @param ht hash table operated upon
      663:  179:void ioopm_hash_table_clear(ioopm_hash_table_t *ht) {
      897:  180:    for (int i = 0; i < No_Buckets; i++) {
      234:  181:        entry_t *entry = ht->buckets[i];
      234:  182:        while (entry != NULL) {
      234:  183:            entry_t *next = entry->next;
      234:  184:            free(entry->value);   // Free the value string
        -:  185:            free(entry);          // Free the entry itself
      663:  186:            entry = next;
        -:  187:        }
       39:  188:        ht->buckets[i] = NULL; // Set bucket to NULL after clearing
        -:  189:    }
        -:  190:}
        -:  191:
        -:  192:/// @brief return the keys for all entries in a hash map 
        6:  193:/// @param ht hash table operated upon
        6:  194:/// @return an array of keys for hash table ht
        6:  195:int *ioopm_hash_table_keys(ioopm_hash_table_t *ht) {
        6:  196:    int size = ioopm_hash_table_size(ht);
      108:  197:    int *keys = calloc(size, sizeof(int));
      102:  198:    int counter = 0;
      132:  199:    for (int i = 0; i < No_Buckets; i++) {
       30:  200:        entry_t *entry = ht->buckets[i];
       30:  201:        while (entry != NULL) {
       30:  202:            keys[counter] = entry->key;
        -:  203:            entry = entry->next;
        -:  204:            counter++;
        6:  205:        }
        -:  206:    }
        -:  207:    return keys;
        -:  208:}
        -:  209:
        -:  210:/// @brief return the values for all entries in a hash map 
        3:  211:/// @param ht hash table operated upon
        3:  212:/// @return an array of values for hash table ht
        3:  213:char **ioopm_hash_table_values(ioopm_hash_table_t *ht) {
        3:  214:    int size = ioopm_hash_table_size(ht);
       54:  215:    char **values = calloc(size, sizeof(char *));
       51:  216:    int counter = 0;
       66:  217:    for (int i = 0; i < No_Buckets; i++) {
       15:  218:        entry_t *entry = ht->buckets[i];
       15:  219:        while (entry != NULL) {
       15:  220:            values[counter] = strdup(entry->value); // Copy values to prevent dangling references
        -:  221:            entry = entry->next;
        -:  222:            counter++;
        3:  223:        }
        -:  224:    }
        -:  225:    return values;
        -:  226:}
        -:  227:
        -:  228:/// @brief return the values for all entries in a hash map 
        -:  229:/// @param ht hash table operated upon
        6:  230:/// @param key the key sought
        6:  231:/// @return the boolean value of the given key in the hash table
        -:  232:bool ioopm_hash_table_has_key(ioopm_hash_table_t *ht, int key) {
        -:  233:    return ioopm_hash_table_lookup(ht, key) != NULL;
        -:  234:}
        -:  235:
        -:  236:/// @brief check if a hash table has an entry with a given value
        -:  237:/// @param ht hash table operated upon
        9:  238:/// @param value the value sought
      114:  239:/// @return the boolean value of the given value in the hash table
      108:  240:bool ioopm_hash_table_has_value(ioopm_hash_table_t *ht, char *value) {
      111:  241:    for (int i = 0; i < No_Buckets; i++) {
        6:  242:        entry_t *entry = ht->buckets[i];
        3:  243:        while (entry != NULL) {
        -:  244:            if (strcmp(value, entry->value) == 0) { // Compare the values
        3:  245:                return true;
        -:  246:            }
        -:  247:            entry = entry->next;
        6:  248:        }
        -:  249:    }
        -:  250:    return false;
        -:  251:}
        -:  252:
        -:  253:/// @brief Check if a predicate is satisfied by all entries in a hash table
        -:  254:/// @param ht Hash table operated upon
        -:  255:/// @param pred The predicate function pointer
        6:  256:/// @param arg Extra argument to pass to the predicate
       66:  257:/// @return True if the predicate holds for all entries, otherwise false
       63:  258:bool ioopm_hash_table_all(ioopm_hash_table_t *ht, ioopm_predicate *pred, void *arg) {
       78:  259:    for (int i = 0; i < No_Buckets; i++) {
        -:  260:        entry_t *entry = ht->buckets[i];
       18:  261:        while (entry != NULL) {
        3:  262:            // Use the predicate on current key, value, and additional arg
        -:  263:            if (!pred(entry->key, entry->value, arg)) {
       15:  264:                return false; // Found a value that does not satisfy the predicate
        -:  265:            }
        -:  266:            entry = entry->next;
        3:  267:        }
        -:  268:    }
        -:  269:    return true; // All values satisfied the predicate
        -:  270:}
        -:  271:
        -:  272:/// @brief Check if a predicate is satisfied by any entry in a hash table
        -:  273:/// @param ht hash table operated upon
        6:  274:/// @param pred the predicate
       81:  275:/// @param arg extra argument to pred
       78:  276:bool ioopm_hash_table_any(ioopm_hash_table_t *ht, ioopm_predicate *pred, void *arg) {
       99:  277:    for (int i = 0; i < No_Buckets; i++) {
       24:  278:        entry_t *entry = ht->buckets[i];
        3:  279:        while (entry != NULL) {
        -:  280:            if (pred(entry->key, entry->value, arg)) {
       21:  281:                return true; // Found a satisfying value
        -:  282:            }
        -:  283:            entry = entry->next;
        3:  284:        }
        -:  285:    }
        -:  286:    return false; // No values satisfied the predicate
        -:  287:}
        -:  288:
        -:  289:/// @brief Apply a function to all entries in a hash table
        -:  290:/// @param ht hash table operated upon
        3:  291:/// @param apply_fun the function to be applied to all elements
        3:  292:/// @param arg extra argument to apply_fun
    #####:  293:void ioopm_hash_table_apply_to_all(ioopm_hash_table_t *ht, ioopm_apply_function *apply_fun, void *arg) {
        -:  294:    if (!ht || !apply_fun) {
        -:  295:        return;
       54:  296:    }
       51:  297:    
       60:  298:    for (int i = 0; i < No_Buckets; i++) {
        -:  299:        entry_t *entry = ht->buckets[i];
        9:  300:        while (entry != NULL) {
        9:  301:            // Use the apply function on current key, value, and additional arg
        -:  302:            apply_fun(entry->key, &entry->value, arg); // Apply the function to the value
        -:  303:            entry = entry->next;
        -:  304:        }
        -:  305:    }
        -:  306:}
